{
    "review": "<h2>5.1 One-Dimensional Arrays</h2><ol><li><p>A data structure containing a number of data values, all of which have <strong>the same type</strong>.</p></li><li><p>Elements can be individually selected by their position within the array.</p></li><li><p>Elements are conceptually arranged one after another in a single row (or column).</p></li><li><p>Declare by specifying the type of elements and the number of them.</p><pre><code>int a[10];\n</code></pre></li><li><p>Element may be of any type.</p></li><li><p>The length can be any constant expression.</p></li><li><p>The elements are accessed by subscripting or indexing the array, that is, write the array name followed by an integer value in square brackets.</p></li><li><p>The elements are indexed from <code>0</code> to <code>n - 1</code>, where <code>n</code> is the length of array.</p></li><li><p>The length of an array could be determined by <code>sizeof</code> operator:</p><pre><code>int a[10];\n(sizeof(a) / sizeof(a[0])); // 10\n</code></pre></li></ol><h3>Array Subscripting</h3><ol><li><p>Array subscript may be any integer expression which can even have side effects.</p></li><li><p>If a subscript goes out of range, the program’s behavior is <strong>undefined</strong>.</p></li></ol><h3>Array Initialization</h3><ol><li><p>The most common form of array initializer is a list of constant expressions enclosed in braces and separated by commas:</p><pre><code>int a[5] = {1, 2, 3, 4, 5};\n</code></pre></li><li><p>If the initializer is shorter than the array, the remaining elements of the array are given the value <code>0</code>.</p></li><li><p>It’s <strong>illegal</strong> for an initializer to be completely empty.</p></li><li><p>It’s <strong>illegal</strong> for an initializer to be longer than the array it initializes.</p></li><li><p>If an initializer is present, the length of the array may be omitted:</p><pre><code>int a[] = {1, 2, 3, 4};\n</code></pre></li><li><p>Designated initializers is used to initialize relatively few elements of an array:</p><pre><code>int a[10] = {[2] = 2, [5] = 5};\n</code></pre></li><li><p>Each number in brackets is said to be a designator, which must be integer constant expressions and is limited between 0 to the length of array - 1.</p></li><li><p>If the length of the array is omitted, a designator can be any nonnegative integer.</p></li><li><p>The two initialization technique could be mixed used.</p></li></ol><h2>5.2 Multidimensional Arrays</h2><ol><li><p>An array may have any number of dimensions.</p></li><li><p>Each dimension is indexed from 0.</p></li><li><p>C stores arrays in row-major order, with row 0 first, then row 1, and so forth.</p></li></ol><h3>Initialization</h3><ol><li><p>The initializer for a two-dimensional array can be created by nesting one-dimensional initializers:</p><pre><code>int a[2][3] = {{1, 1, 0},\n               {0, 1},\n               {1, 1, 0}};\n</code></pre></li><li><p>If an initializer isn’t large enough to fill a multidimensional array, the remaining elements are given the value 0.</p></li><li><p>If an inner list isn’t long enough to fill a row, the remaining elements in the row are initialized to 0.</p></li><li><p>The inner braces could be omitted.</p></li><li><p>Designated initializers work with multidimensional arrays:</p><pre><code>int m[2][2] = {[0][1] = 1, [1][1] = 2};\n</code></pre></li></ol><h3>Constant Arrays</h3><ol><li><p>An array can be made “constant” by starting its declaration with the word <code>const</code>.</p></li><li><p>A constant array should not be modified by the program.</p></li></ol>",
    "videoUrl": "https://www.youtube.com/embed/AeU9OcRiEEM,https://www.youtube.com/embed/b4T6xAOXiHc",
    "makeUpTime": "2022-11-02T16:00:00.000Z",
    "notification": {
        "makeUpTime": "zhXVax53wmiIGNcbuJmr"
    },
    "startTime": "2022-10-19T16:00:00.000Z",
    "dueTime": "2022-11-09T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec05",
    "title": "Arrays"
}