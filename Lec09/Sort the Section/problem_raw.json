{
    "description": "<p>給定一個整數序列 A，由索引 <code>a</code> 到 <code>b</code> 排序部分的序列（假設 <code>a</code> 小於 <code>b</code>）</p><p>請使用泡沫排序法完成 <code>sort_section</code> 函式，其中 <code>ptr</code> 以及 <code>qtr</code> 為指標指向部分序列的開始或結束位址。（<code>ptr</code> ≠ <code>qtr</code>，但 <code>ptr</code> 可能大於 <code>qtr</code>）</p><hr><p>Given a sequence of integers A, and two index <code>a</code> <code>b</code>, sort the section of A from index <code>a</code> to <code>b</code>(suppose <code>a</code> is smaller than <code>b</code>)</p><p>Please use bubble sort to finish <code>sort_section</code> function, the <code>ptr</code> and <code>qtr</code> is a pointer that points to the start/end of the section.(<code>ptr</code> ≠ <code>qtr</code>, but <code>ptr</code> might be bigger than <code>qtr</code>)</p>",
    "inputFormat": "第一行有一個整數 N ( 2 <= N <= 1000) ，代表序列 A 的長度。第二行有兩個整數 a b(a ≠ b，不保證 a 小於 b)，代表部分序列的開始或結束索引。第三行有 N 個整數，代表序列 A 的所有元素。\r\nThe first line is an integer N(2 ≤ N ≤ 1000), indicates the number of integers in A. The second line has two integers a and b(a ≠ b, does not guarantee that a < b), indicates the start/end index of the section. The third line has N integers, indicates the elements of sequence A.",
    "outputFormat": "當排序部分的序列時，輸出每做完一輪後的當前序列，最後輸出整個序列。\r\nWhen sorting the section, please output the result on each round, then output the whole sequence.",
    "level": "Easy",
    "chapter": {
        "type": "Homework",
        "index": "Lec09"
    },
    "tags": [
        "Pointers",
        "Array"
    ],
    "hint": "",
    "timeLimit": 1,
    "memLimit": 5000,
    "coinReward": 0,
    "loaderCode": "#include <stdio.h>\r\n#define ARR_MAX 1000\r\nvoid sort_section(int *ptr, int *qtr);\r\nint main() {\r\n  int N, a, b;\r\n  scanf(\"%d%d%d\", &N, &a, &b);\r\n  int arr[ARR_MAX] = {0};\r\n  for (int i = 0; i < N; i++) {\r\n    scanf(\"%d\", arr + i);\r\n  }\r\n  sort_section(&arr[a], &arr[b]);\r\n  for (int i = 0; i < N; i++) {\r\n    printf(\"%d \", *(arr + i));\r\n  }\r\n}",
    "templateCode": "void sort_section(int *ptr, int *qtr) {\r\n\r\n}\r\n",
    "title": "Sort the Section",
    "date": "2022-11-15T13:55:52.098Z",
    "samples": [
        {
            "inputData": "15\n4 11\n141 -35 -143 73 141 -11 55 -98 -21 -58 118 -55 -148 -29 232",
            "outputData": "-11 55 -98 -21 -58 118 -55 141\n-11 -98 -21 -58 55 -55 118 141\n-98 -21 -58 -11 -55 55 118 141\n-98 -58 -21 -55 -11 55 118 141\n-98 -58 -55 -21 -11 55 118 141\n-98 -58 -55 -21 -11 55 118 141\n-98 -58 -55 -21 -11 55 118 141\n141 -35 -143 73 -98 -58 -55 -21 -11 55 118 141 -148 -29 232 "
        },
        {
            "inputData": "11\n2 9\n104 119 -78 74 95 -87 120 -86 143 102 219",
            "outputData": "-78 74 -87 95 -86 120 102 143\n-78 -87 74 -86 95 102 120 143\n-87 -78 -86 74 95 102 120 143\n-87 -86 -78 74 95 102 120 143\n-87 -86 -78 74 95 102 120 143\n-87 -86 -78 74 95 102 120 143\n-87 -86 -78 74 95 102 120 143\n104 119 -87 -86 -78 74 95 102 120 143 219 "
        },
        {
            "inputData": "10\n9 2\n-20 -84 -41 131 71 -7 69 104 22 -132",
            "outputData": "-41 71 -7 69 104 22 -132 131\n-41 -7 69 71 22 -132 104 131\n-41 -7 69 22 -132 71 104 131\n-41 -7 22 -132 69 71 104 131\n-41 -7 -132 22 69 71 104 131\n-41 -132 -7 22 69 71 104 131\n-132 -41 -7 22 69 71 104 131\n-20 -84 -132 -41 -7 22 69 71 104 131 "
        }
    ],
    "id": "H6ydzYlLEIrK"
}