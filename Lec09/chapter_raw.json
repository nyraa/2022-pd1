{
    "review": "<h2><strong>9.1 Pointer Arithmetic</strong></h2><ul><li><p>Arithmetic on pointers can take place of array subscripts.</p></li><li><p>Three supported pointer arithmetic:</p><ul><li><p><strong>Adding an integer</strong> to a pointer.</p></li><li><p><strong>Subtracting an integer</strong> from a pointer.</p></li><li><p><strong>Subtracting one pointer</strong> from another.</p></li></ul></li><li><p>If a pointer <code>p</code> points to the array element <code>a[i]</code>, then <code>p + j</code> points to <code>a[i+j]</code>.</p></li><li><p>If a pointer <code>p</code> points to <code>a[i]</code>, then <code>p - j</code> points to <code>a[i-j]</code> .</p></li><li><p>When one pointer is <strong>subtracted</strong> from another, the result is the <strong>distance</strong> (measured in array elements) between the pointers.</p></li><li><p>Pointers can be compared using the relational operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>) and the equality operators (<code>==</code> and <code>!=</code>).</p></li><li><p>Operations that cause <strong>undefined behavior</strong>:</p><ul><li><p>Performing arithmetic on a pointer that doesn’t point to an array element.</p></li><li><p>Subtracting pointers not in the same array.</p></li></ul></li><li><p>Combining the * and ++ Operators:<br><img src=\"https://i.imgur.com/bKGwt9X.png\" alt=\"\"></p></li></ul><h2><strong>9.2 Using an Array Name as a Pointer</strong></h2><ul><li><p>The name of an array can be used as a pointer to the first element, but it’s <strong>not possible to assign a new value</strong>.</p></li><li><p>When <strong>passed to a function</strong>, an array name is treated as a pointer.</p></li><li><p>C allows us to <a href=\"https://www.ibm.com/docs/en/i/7.4?topic=expressions-array-subscripting-operator\" rel=\"noopener noreferrer nofollow\">subscript</a> a pointer as though it were an array name. In this example, the compiler treats <code>p[i]</code> as <code>*(p+i)</code>.</p><pre><code>int a[N], i, sum = 0, *p = a;\nfor (i = 0; i &lt; N; i++)\n    sum += p[i];</code></pre></li></ul><h2><strong>9.3 Pointers and Multidimensional Arrays</strong></h2><ul><li><p>Just as pointers can point to elements of one dimensional arrays, they can also point to elements of multidimensional arrays.</p></li><li><p>For any two-dimensional array <code>a</code>, the expression <code>a[i]</code> is a <strong>pointer to the first element</strong> in row <code>i</code>.</p></li><li><p>Example:</p><pre><code>int a[NUM_ROWS][NUM_COLS];\n</code></pre><ul><li><p><code>a</code> is not a pointer to <code>a[0][0]</code>; Instead, it’s a pointer to <code>a[0]</code>.</p></li><li><p>C regards <code>a</code> as a one-dimensional array whose elements are one-dimensional arrays.</p></li><li><p>When used as a pointer, <code>a</code> has type <code>int (*)[NUM_COLS]</code> .</p></li></ul></li></ul>",
    "videoUrl": "https://www.youtube.com/embed/7Adnxf3Yq1I,https://www.youtube.com/embed/7H8dvREBRWo,https://www.youtube.com/embed/GBPoB2lZ8Do",
    "makeUpTime": "2022-11-30T16:00:00.000Z",
    "notification": {
        "makeUpTime": "baXA07lajN1pKV24lhyZ"
    },
    "startTime": "2022-11-16T16:00:00.000Z",
    "dueTime": "2022-12-07T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec09",
    "title": "Pointers and Arrays"
}