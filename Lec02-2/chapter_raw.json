{
    "review": "<h2><strong>2.5 Arithmetic Operators</strong></h2><ul><li><p>Use variables, constants and <strong>operators</strong> to build expressions</p></li><li><p>C has many kinds of operators, including:</p><ul><li><p><strong>Arithmetic operators</strong></p></li><li><p>Relational operators (See Lec03)</p></li><li><p>Logical operators (See Lec03)</p></li><li><p><strong>Assignment operators</strong></p></li><li><p><strong>Increment and decrement operators</strong></p></li><li><p>Others, we will see in the future</p></li></ul></li></ul><p></p><h3>Arithmetic operators</h3><ul><li><p>Unary operators has one operand, like</p><ul><li><p><code>+</code> unary plus (does nothing, used to emphasize the number is positive)</p></li><li><p><code>-</code> unary minus</p></li></ul></li><li><p>Binary operators has two operands, like</p><ul><li><p><code>+</code> addition</p></li><li><p><code>-</code> subtraction</p></li><li><p><code>*</code> multiplication</p></li><li><p><code>/</code> division</p></li><li><p><code>%</code> remainder</p></li></ul></li><li><p> Binary operators, except <code>%</code>, allow mixed type operands.</p><ul><li><p>If both two operands are <code>int</code>, the result is <code>int</code></p></li><li><p>If at least one of the operand is <code>float</code>, the result is <code>float</code></p></li></ul></li><li><p><code>/</code> and <code>%</code> require special care</p><ul><li><p><code>/</code> truncate the result (only return the quotient) when both operands are <code>int</code></p></li><li><p><code>%</code> requires both operands to be <code>int</code> (apply on <code>float</code> cause <strong>compile error</strong>)</p></li><li><p>The result of <code>%</code> has the same sign as the left hand side operand</p></li><li><p>Divide by zero cause undefined behavior</p></li></ul></li></ul><p></p><h3>Operator precedence</h3><ul><li><p>If the parentheses are omitted, C uses <strong>operator precedence rules</strong> to evaluate the expression</p><ul><li><p>Operators that have higher precedence are evaluated first</p></li><li><p>For arithmetic operators: unary <code>+</code>, <code>-</code> &gt; <code>*</code>, <code>/</code>, <code>%</code> &gt; binary <code>+</code>, <code>-</code></p></li><li><p>For example: <code>-i + j / k</code> is equivalent to <code>((-i) + (j / k))</code></p></li></ul></li></ul><p></p><h3>Associativity</h3><ul><li><p>If more then one operators with equal precedence are present in an expression, the <strong>operator associativity</strong> decides how they are grouped</p><ul><li><p>If an operator is left associative, it groups from left to right. For example, <code>1 + 2 + 3</code> is equivalent to <code>((1 + 2) + 3)</code></p></li><li><p>If an operator is right associative, it groups from right to left. For example, <code>--4</code> is equivalent to <code>(-(-4))</code></p></li></ul></li></ul><p></p><h2><strong>2.6 Assignment Operators</strong></h2><ul><li><p><strong>Assignment</strong> means \"<strong>copy a value into a variable</strong>\".</p><ul><li><p>The value can be a constant, another variable or a result of an expression</p></li></ul></li></ul><p></p><h3>Simple assignment</h3><ul><li><p>Operator <code>=</code> applies <strong>simple assignment</strong>.</p><ul><li><p><code>v = e</code> means \"copy the value of <code>e</code> into <code>v</code>\"</p></li><li><p>If <code>v</code> and <code>e</code> don't have the same type, the result is <strong>convert to the type of </strong><code>v</code></p></li></ul></li><li><p> Assignment operator modifies its operands, thus is said to have a <strong>side effect</strong>.</p></li><li><p>Only <strong>lvalue</strong> can be assigned a value.</p><ul><li><p>Variable are lvalues, but constants or expressions are not</p></li><li><p>For example, <code>12 = i;</code> is not allowed, since you can assign value to constant</p></li><li><p>Assigning value to something that is not lvalue causes compile error</p></li></ul></li></ul><p></p><h3>Compound assignment</h3><ul><li><p>Use the old value of the variable that is being assigned to calculate, and then put the result back to it.</p><ul><li><p>For example: <code>x += 2;</code> is same as <code>x = x + 2;</code></p></li></ul></li><li><p>Compound assignment operator including:</p><ul><li><p><code>+=</code> </p></li><li><p><code>-=</code> </p></li><li><p><code>*=</code></p></li><li><p><code>/=</code> </p></li><li><p><code>%=</code> </p></li></ul></li></ul><p></p><h3>Increment and decrement operators</h3><ul><li><p><code>++</code> and <code>--</code> are known as increment and decrement operators, respectively.</p><ul><li><p>They are unary operators</p></li><li><p><code>++</code> is used to increase the operand by 1</p></li><li><p><code>--</code> is used to decrease the operand by 1</p></li></ul></li><li><p>There are pre-increment/decrement and post-increment/decrement operation.</p><ul><li><p>If <code>++</code> / <code>--</code> is put before the operand (prefix), it increase / decrease the operand immediately</p></li><li><p>If <code>++</code> / <code>--</code> is put after the operand (postfix), it increase / decrease the operand before the next statement is executed</p></li></ul></li><li><p>Use these operators more than once within an expression make program hard to read.</p></li></ul><p></p><h2><strong>2.7 Expression Evaluation</strong></h2><p><img src=\"https://i.imgur.com/BIDGyZ1.png\"></p><ul><li><p>C evaluate an complicated expression according to the operator precedence and associativity above.</p></li><li><p>C doesn't define the order in which sub-expressions are evaluated (exception: logical and, logical or, conditional, and comma operators).</p></li><li><p>Read and write the same variable with in an expression usually causes <strong>undefined behavio</strong>r. Try to avoid that.</p></li><li><p>C allow any expression to be used as a statement, but <strong>only statements that have side effect are useful</strong>.</p><ul><li><p>For example: <code>a = 1 + 2;</code> is useful, <code>++i;</code> is useful, but <code>a + 2</code> is not.</p></li></ul></li></ul>",
    "videoUrl": "https://www.youtube.com/embed/4sJCqEd9qos,https://www.youtube.com/embed/Cq4dB1Yif0k,https://www.youtube.com/embed/FWVdZvCjxQs",
    "makeUpTime": "2022-10-05T16:00:00.000Z",
    "notification": {
        "makeUpTime": "JfJ98LmCe9cqW-xQyLPB"
    },
    "startTime": "2022-09-21T16:00:00.000Z",
    "dueTime": "2022-10-12T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec02-2",
    "title": "C Fundamentals (part 2)"
}