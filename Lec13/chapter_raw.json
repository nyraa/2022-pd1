{
    "review": "<h3><strong>Linked Lists</strong></h3><ul><li><p>A linked list consists of a chain of structures (called <code>nodes</code>), with each node containing a pointer to the next node in the chain:<br><img src=\"https://i.imgur.com/Uo9k9UN.png\" alt=\"\"></p></li><li><p>The last node in the list contains a <strong>null pointer</strong>.</p></li><li><p>Accessing a node in a linked list is fast if the node is close to the beginning of the list, slow if it’s near the end.</p></li></ul><h3><strong>Creating a Node</strong></h3><ul><li><p>A node structure will contain data (an integer in this example) plus a pointer to the next node in the list:</p><pre><code>struct node {\n   int value; /* data stored in the node */\n   struct node *next; /* pointer to the next node */\n};</code></pre></li><li><p>We’ll need a variable that always points to the first node in the list</p></li><li><p>Setting <code>first</code> to <code>NULL</code> indicates that the list is <strong>initially empty</strong>.</p><pre><code>struct node *first = NULL;</code></pre></li><li><p>Following are the steps involved in creating a node:</p><ol><li><p><strong>Allocate memory</strong> for the node.</p></li><li><p><strong>Store data</strong> in the node.</p></li><li><p><strong>Insert the node</strong> into the list.</p></li></ol></li></ul><h3><strong>The </strong><code>-&gt;</code> Operator</h3><ul><li><p>C provides <code>-&gt;</code> operator (right arrow selection) for accessing a member of a structure using a pointer.</p></li><li><p>The <code>-&gt;</code> operator produces an <strong>lvalue</strong>, so we can use it wherever an ordinary variable would be allowed.</p></li></ul><h3><strong>Example of Bacic Linked Lists Operations</strong></h3><ul><li><p><strong>Inserting</strong> a node <strong>at the beginning</strong> of a linked List</p><pre><code>struct node *add_to_list(struct node *list, int n)\n{\n    struct node *new_node;\n    new_node = malloc(sizeof(struct node));\n    if (new_node == NULL) {\n        printf(\"Error: malloc failed in add_to_list\\n\");\n        exit(EXIT_FAILURE);\n    }\n    new_node-&gt;value = n;\n    new_node-&gt;next = list;\n    return new_node;\n}</code></pre></li><li><p><strong>Searching</strong> a Linked List</p><pre><code>struct node *search_list(struct node *list, int n)\n{\n    struct node *p;\n    for (p = list; p != NULL; p = p-&gt;next)\n        if (p-&gt;value == n)\n            return p;\n    return NULL;\n}</code></pre></li><li><p><strong>Deleting</strong> a Node from a Linked List</p><pre><code>struct node *delete_from_list(struct node *list, int n)\n{\n    struct node *cur, *prev;\n    for (cur = list, prev = NULL;\n        cur != NULL &amp;&amp; cur-&gt;value != n;\n        prev = cur, cur = cur-&gt;next)\n      ;\n    if (cur == NULL)\n        return list; /* n was not found */\n    if (prev == NULL)\n        list = list-&gt;next; /* n is in the first node */\n    else\n        prev-&gt;next = cur-&gt;next; /* n is in some other node */\n    free(cur);\n    return list;\n}</code></pre></li></ul>",
    "videoUrl": "https://www.youtube.com/embed/0fWb30H4r0A",
    "makeUpTime": "2022-12-28T16:00:00.000Z",
    "notification": {
        "makeUpTime": "avKOpRh6HNLDPpa61BaN"
    },
    "startTime": "2022-12-14T16:00:00.000Z",
    "dueTime": "2023-01-04T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec13",
    "title": "Linked List"
}