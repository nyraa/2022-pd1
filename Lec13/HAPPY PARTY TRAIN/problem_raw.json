{
    "description": "<p>One tourist train is departing, and it's powered by a steam locomotive.</p><p>Unfortunately, when passengers holding a party in cars,</p><p>the coal used as fuel in the back of the locomotive is on fire, burning red.</p><p>And every car contains different number of flammable items.</p><p>When passengers see the fire coming, they try to move these items to prevent fire burn to their car.</p><p>If number of peoples in the car &gt;= amounts of flammable items, fire will not burn to this car and the following cars.</p><p>Otherwise, passengers in this car will evacuate to the the next car.</p><p>Now you know the number of people &amp; flammable items in each car,</p><p>Please calculate how many cars will be burnt by fire.</p><p>This train is represented with linked-list，each <code>Car</code> node's <code>next</code> will point to the next car，last cat will points to <code>NULL</code></p><p><img alt=\"Image\" src=\"https://i.imgur.com/sK1mOQQ.png\"></p><p>一列鐵道觀光專車在春天來臨的花香中，乘著無盡想像發車了</p><p>為了為乘客們帶來種種回憶，主辦單位特別使用蒸氣火車頭牽引這列專車</p><p>很不幸的，乘客們正在車廂中開派對時，車頭後作為燃料的煤炭起火了，正發出熊熊火光</p><p>而後方每節車廂中都有數量不等的易燃物</p><p>當大家發現火災發生時，便試著將易燃物搬開來避免火勢延燒</p><p>若該節車廂人數 &gt;= 易燃物數量時，火勢便會停止蔓延，不會延燒到該節和後續的車廂</p><p>但若人數不足，則車廂中所有人都會移往下一節車廂逃生</p><p>直到延燒停止或所有乘客無處可逃並跳車為止。</p><p>你已知的有每節車廂中的人數及易燃物數量</p><p>請計算火勢總共會延燒幾節車廂？</p><p>這列火車以 linked-list 形式紀錄，每個 <code>Car</code> 節點的 <code>next</code> 會指向下一節車廂，最後一節車廂則指向 <code>NULL</code><br><img alt=\"Image\" src=\"https://i.imgur.com/sK1mOQQ.png\"></p><p><a rel=\"noopener noreferrer nofollow\" href=\"https://youtu.be/eVwdeIDjXeM\">https://youtu.be/eVwdeIDjXeM</a></p>",
    "level": "Medium",
    "chapter": {
        "type": "Homework",
        "index": "Lec13"
    },
    "tags": [
        "If/else",
        "Loop",
        "Pointers",
        "Struct"
    ],
    "timeLimit": 1,
    "memLimit": 65536,
    "coinReward": 0,
    "title": "HAPPY PARTY TRAIN",
    "inputFormat": "Head node of the linked-list representing the train.",
    "outputFormat": "Return one integer how many car is on fire.",
    "date": "2020-12-30T08:39:57.316Z",
    "loaderCode": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Car {\n    int passenger;\n    int flammable;\n    struct Car *next;\n};\n\nvoid attachCar(struct Car *head, int passenger, int flammable) {\n    struct Car *curr = head;\n    while(curr->next) curr = curr->next;             // Find the end of the train\n\n    struct Car *newcar = malloc(sizeof(struct Car)); // Make a new car\n    newcar->passenger = passenger;                   // Let passengers in\n    newcar->flammable = flammable;                   // Load flammable items\n    newcar->next = NULL;                             // This is the last car\n\n    curr->next = newcar;                             // Attach new car to the train\n}\n\nint fire(struct Car *head);\n\nint main(int argc, char *argv[])\n{\n    int cars;\n    int human[13], moeru[13];\n\n    struct Car head;\n    head.next = NULL; // passenger & flammable for head in useless\n\n    scanf(\"%d\", &cars);\n    for (int i = 0; i < cars; ++i) {\n        scanf(\"%d\", &human[i]);\n    }\n    for (int i = 0; i < cars; ++i) {\n        scanf(\"%d\", &moeru[i]);\n    }\n\n    for (int i = 0; i < cars; ++i) {\n        attachCar(&head, human[i], moeru[i]);\n    }\n\n    printf(\"%d\", fire(&head)); // The train is on fire now\n\n    return 0;\n}\n",
    "templateCode": "int fire(struct Car *head) {\n\n}\n",
    "hint": "",
    "samples": [
        {
            "inputData": "9\n2 1 4 7 4 8 3 6 4\n5 9 8 6 1 3 5 2 4\n",
            "outputData": "3"
        },
        {
            "inputData": "4\n17 17 11 8\n23 35 36 37\n",
            "outputData": "2"
        }
    ],
    "id": "JduH6BpuraG1"
}