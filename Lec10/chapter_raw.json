{
    "review": "<h1>String Literals</h1><ol><li><p>A sequence of characters enclosed within double quotes.</p></li><li><p>May contain escape sequences.</p></li><li><p>Continuing a string literal:</p><ul><li><p>Backslash charactor <code>\\</code>.</p></li><li><p>Two or more adjacent string literals.</p></li></ul></li><li><p>A string literal of length <code>n</code> occupies <code>n + 1</code> bytes of memory: terminated by a <strong>null character</strong> (<code>'\\0'</code>).</p></li><li><p>Treated as a pointer of type <code>char *</code>.</p></li><li><p>Subscriptable:</p></li></ol><pre><code>char ch = \"abc\"[1]; // ch = 'b'</code></pre><ol start=\"7\"><li><p>Attempting to modify a string literal causes undefined behavior.</p></li></ol><h1>String Variables</h1><ol><li><p>Can be stored in any one-dimensional array of characters.</p></li><li><p>Must be terminated by a <strong>null character</strong>.</p></li><li><p>Can be initialized at the same time itâ€™s declared:</p></li></ol><pre><code>char str[3] = \"hi\";</code></pre><ol start=\"4\"><li><p>The length may be omitted while declaring a string variable:</p></li></ol><pre><code>char str[] = \"hi\";</code></pre><ol start=\"5\"><li><p>Use subscripting to access the characters in a string.</p></li></ol><h1>Reading and Writing Strings</h1><h2>Writing</h2><ol><li><p>Using <code>printf()</code>:</p><ol><li><p>Full string: <code>%s</code>.</p></li><li><p>First <code>p</code> characters of string: <code>%.ps</code>.</p></li><li><p>In the field of size <code>m</code>: <code>%ms</code>.</p></li><li><p>First <code>p</code> charaters in the field of size <code>m</code>: <code>%m.ps</code>.</p></li></ol></li><li><p>Using <code>puts()</code>: an additional newline character is printed.</p></li></ol><h2>Reading</h2><ol><li><p>Using <code>scanf()</code>:</p><ol><li><p>A <strong>new-line</strong> character will cause scanf to stop reading, but so will a <strong>space</strong> or <strong>tab</strong> character.</p></li><li><p>Always stores a null character at the end of the string.</p></li><li><p>Can be made safer by using the conversion specification <code>%ns</code>.</p></li></ol></li><li><p>Using <code>gets()</code>:</p><ol><li><p>Reads until it finds a new-line character.</p></li><li><p>Discards the new-line character.</p></li><li><p>Always stores a null character at the end of the string.</p></li><li><p>Inherently unsafe; <code>fgets()</code> is a much better alternative.</p></li></ol></li></ol><h1>using the C String Library</h1><h2><code>string.h</code></h2><ol><li><p><code>char strcpy(char dst, const char *src);</code>: Copy string from <code>src</code> to <code>dst</code>, <code>dst</code> is returned.</p></li><li><p><code>char strncpy(char dst, const char *src, size_t n)</code>: Similar to <code>strcpy()</code>, but copies at most <code>n</code> characters.</p></li><li><p><code>size_t strlen(const char *str);</code>: Returns the length of the string <code>str</code>.</p></li><li><p><code>char strcat(char str1, const char *str2);</code>: Appends the string <code>str2</code> at the end of the string <code>str1</code>, <code>str1</code> is returned.</p></li><li><p><code>char strncat(char str1, const char *str2, size_t n);</code>: Similar to <code>strcat()</code>, but copies at most <code>n</code> characters.</p></li><li><p><code>int strcmp(const char str1, const char str2);</code>: Compares the strings <code>str1</code> and <code>str2</code>, returning a value less than, equal to, or greater than 0, depending on whether <code>str1</code> is less than, equal to, or greater than <code>str2</code>.</p><ul><li><p>Looks at the numerical codes for the characters in the strings.</p></li></ul></li><li><p><code>char strtok(char str, const char *delm);</code>: Isolates sequential tokens, separated by at least one of the characters in <code>delm</code>, in the string <code>str</code>.</p><ul><li><p><code>str</code> should be specified only at the first time that <code>strtok()</code> is called, a <strong>null pointer</strong> should be passed if the next token of the same string is desired.</p></li></ul></li></ol>",
    "videoUrl": "https://www.youtube.com/embed/3LUP1K_R0DI,https://www.youtube.com/embed/SBqTfnPYvpw,https://www.youtube.com/embed/mblepJ5Z4PA,https://www.youtube.com/embed/ZuGgQf5OFNs",
    "makeUpTime": "2022-12-07T16:00:00.000Z",
    "notification": {
        "makeUpTime": "j6yXs7pJger9rnOXBz6K"
    },
    "startTime": "2022-11-23T16:00:00.000Z",
    "dueTime": "2022-12-14T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec10",
    "title": "String"
}