{
    "review": "<h2><strong>6.2 Arguments</strong></h2><ol><li><p>In C, arguments are passed by value.</p></li><li><p>Changes made to the parameter do not affect the argument.</p></li><li><p>The value of each argument is implicitly converted to the type of the corresponding parameter.</p></li></ol><h3>Array arguments</h3><ol><li><p>When a function parameter is an one-dimensional array, the length of the array can be omitted.</p></li><li><p>There is no any easy way to determine the length of the array passed to a function.</p></li><li><p>The brackets is not needed while passing an array to a function.</p></li><li><p>The change to the elements of an array parameter will reflect in the original array.</p></li><li><p>Only the length of the first dimension could be omitted while a parameter is a multidimentional array.</p></li></ol><p></p><h2><strong>6.3 Function and Program Termination</strong></h2><h3><code>return</code> Statement</h3><pre><code>return expr;</code></pre><ol><li><p>A non-void function must use the return statement to specify the value to be return.</p></li><li><p>The behavior of the program is undefined if it attempts to use the return value of a non-void function that failed to execute a <code>return</code> statement.</p></li><li><p><code>expr</code> could be just a constant, a variable, or even more complex expressions.</p></li><li><p>The type of the <code>expr</code> will be implicitly converted to the return type of the function.</p></li><li><p><code>return</code> statements could appear in functions that return <code>void</code>.</p></li></ol><h3>Program Termination</h3><ol><li><p>The value returned by <code>main</code> is a status code that can be tested when the program terminates.</p></li></ol><ul><li><p><strong>The </strong><code>exit</code><strong> Function</strong></p><ol><li><p>Calling the <code>exit</code> function, defined in <code>&lt;stdlib.h&gt;</code>, with the status code as argument terminates the program, too.</p></li><li><p>Often used to terminate the program in the function other than <code>main</code>.</p></li></ol></li></ul><p></p><h2><strong>6.4 Scope</strong></h2><h3>Local Variables</h3><ol><li><p>Variables declared in the body of a function.</p></li><li><p>Visible only from its point of declaration to the end of the enclosing function body.</p></li><li><p>Storage is allocated when the function is called and deallocated when the function returns.</p></li></ol><h3>Static Local Variables</h3><ol><li><p>Declare a local variable with <code>static</code> keyword causes it to have static storage duration.</p></li><li><p>Visible only in the body of the function that declares it.</p></li><li><p>Has a permanent storage location.</p></li><li><p>Retains its value throughout the execution of the program.</p></li></ol><h3>Parameters</h3><ol><li><p>Have the same properties as local variables.</p></li><li><p>Each parameter is initialized when a function is called.</p></li></ol><h3>External Variables</h3><ol><li><p>Variables that are declared outside the body of any function.</p></li><li><p>Also known as global variables.</p></li><li><p>Has static storage duartion as static local variables.</p></li><li><p>Visible from its point of declaration to the end of the enclosing file.</p></li></ol><h3>Block</h3><ol><li><p>Compound statement that contain declarations.</p></li><li><p>Variables declare in a block could not be referenced outside the block.</p></li><li><p>Variables could be declared static to give it static storage duration</p></li><li><p>.Variables are allowed to be declared anywhere within a block.</p></li><li><p>When a declaration inside a block names an identifier thatâ€™s already visible, the new declaration temporarily hides the old one, and the identifier takes on a new meaning.</p></li><li><p>At the end of the block, the identifier regains its old meaning.</p></li></ol>",
    "videoUrl": "https://www.youtube.com/embed/iVxjWePWOLk,https://www.youtube.com/embed/8OHmMKZow_4,https://www.youtube.com/embed/_8_yMXWOsHA",
    "makeUpTime": "2022-11-09T16:00:00.000Z",
    "notification": {
        "makeUpTime": "XDooe1Uq3j2srWpR2t33"
    },
    "startTime": "2022-10-26T16:00:00.000Z",
    "dueTime": "2022-11-16T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec06-2",
    "title": "Function and Scope (part 2)"
}