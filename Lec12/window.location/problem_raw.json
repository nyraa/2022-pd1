{
    "description": "<p>在 Chrome 瀏覽器內按下 F12，會打開瀏覽器的開發者工具。在 console 當中輸入 <code>window.location</code>，會看到一個叫作 <code>Location</code> 的結構跑出來，上頭記載了你當前所在的網址所包含的資訊，包含：</p><ul><li><p>通訊協定 (protocol)</p></li><li><p>主機名稱 (host)</p></li><li><p>通訊埠 (port)</p></li><li><p>所在路徑 (pathname)</p></li><li><p>查詢字串/Query String (search)</p></li><li><p>識別符號 (hash)</p></li></ul><p>那麼，這些不同的部份是怎麼被切出來的呢？其實網址是有固定格式的，就跟你家的門牌號碼一樣。網址的格式為：</p><p><code>[通訊協定]://[主機名稱]:[通訊埠]/[所在路徑]?[查詢字串]#[識別符號]</code></p><p>舉例，<code>https://www.abc.com/user/12345/photo?from=20180101&amp;to=20201231#favorite</code>可以被切成：</p><ul><li><p>通訊協定 = <code>https</code></p></li><li><p>主機名稱 = <code>www.abc.com</code></p></li><li><p>通訊埠 = 預設不顯示（但因為使用的是 https，所以可知是 443）</p></li><li><p>所在路徑 = <code>/user/12345/photo</code></p></li><li><p>查詢字串 = <code>?from=20180101&amp;to=20201231</code></p></li><li><p>識別符號 = <code>#favorite</code></p></li></ul><p>但也並非所有部份都位同時存在於一個網址中，像是本頁面的網址就沒有查詢字串的部份。</p><p>現在，給你一些網址，請你幫忙找出上述的片段，並裝入 <code>Location</code> 結構當中。</p>",
    "inputFormat": "An valid url. Must includes protocol and host part, but port, pathname, search and hash are not necessarily existing.",
    "outputFormat": "You should put the information parsed from url into the struct passed by argument. For information not existing in url, if it's an integer, set to 0; if it's a string, make it an empty string. Hint: you should prepare memory storage yourself.",
    "level": "Hard",
    "chapter": {
        "type": "Homework",
        "index": "Lec12"
    },
    "tags": [
        "Function",
        "String",
        "Struct",
        "If/else",
        "Pointers"
    ],
    "timeLimit": 5,
    "memLimit": 65536,
    "coinReward": 0,
    "loaderCode": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\ntypedef struct\r\n{\r\n    char *protocol;\r\n    char *host;\r\n    char *pathname;\r\n    char *search;\r\n    char *hash;\r\n    int port;\r\n} Location;\r\n\r\nLocation *parse_url(char *url);\r\n\r\nint main()\r\n{\r\n    char url[500] = \"\";\r\n    fgets(url, 500, stdin); // Get url string\r\n    Location *l = parse_url(url);\r\n    printf(\"Location {\\n  protocol: %s,\\n  host: %s,\\n\", l->protocol, l->host);\r\n    if (l->port)\r\n        printf(\"  port: %d,\\n\", l->port);\r\n    else\r\n        printf(\"  port: (default),\\n\");\r\n    printf(\"  pathname: /%s,\\n  search: ?%s,\\n  hash: #%s,\\n}\\n\", l->pathname, l->search, l->hash);\r\n    return 0;\r\n}\r\n",
    "templateCode": "Location *parse_url(char *url)\r\n{\r\n}",
    "title": "window.location",
    "date": "2020-12-31T07:48:16.736Z",
    "hint": "",
    "samples": [
        {
            "inputData": "https://www.abc.com:80/user/12345/photo?from=20180101&to=20201231#favorite\n",
            "outputData": "Location {\n  protocol: https,\n  host: www.abc.com,\n  port: 80,\n  pathname: /user/12345/photo,\n  search: ?from=20180101&to=20201231,\n  hash: #favorite,\n}\n"
        },
        {
            "inputData": "http://1.2.3.4:443/it/is/a/very/long/path/name\n",
            "outputData": "Location {\n  protocol: http,\n  host: 1.2.3.4,\n  port: 443,\n  pathname: /it/is/a/very/long/path/name,\n  search: ?,\n  hash: #,\n}\n"
        },
        {
            "inputData": "ip://193.55.28.30\n",
            "outputData": "Location {\n  protocol: ip,\n  host: 193.55.28.30,\n  port: (default),\n  pathname: /,\n  search: ?,\n  hash: #,\n}\n"
        }
    ],
    "id": "RS_5xkB0PF-1"
}