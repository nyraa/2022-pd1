{
    "review": "<p></p><h1>3.3 The <code>switch</code> statement</h1><p>The <code>switch</code> statement has the following form:</p><pre><code>switch(expression){\n  case: constant-expression: statements\n  ...\n  case: constant-expression: statements\n  default: statements\n}</code></pre><p>where <code>default:</code> could be omitted</p><p>1. The <code>expresssion</code> could only be a <strong>integer</strong> (or character) expression.</p><p>2. The <code>constant-expression</code> should not include any <strong>variables</strong> or <strong>function</strong>.</p><p>3. Duplicate case labels aren't allowed.</p><p>4. Without break at the end of a case, control will flow into the next case.</p><pre><code>switch(v){\n  case 0: printf(\"v is 0\");\n  case 1:\n    printf(\"v is 1\"); // if v == 0, the program will print out \"v is 0\" and \"v is 1\"\n    break;\n}</code></pre><h1>3.4 Iteration Statements</h1><h2>The <code>while</code> statement</h2><p>The <code>while</code> statement has the following form:</p><pre><code>while ( expression ) statement</code></pre><p>1. Expression is the controlling expression.</p><p>2. Statement is the loop body.</p><p>3. The controlling expression is tested <strong>before</strong> the loop body is executed.</p><p>4. If the controlling expression is nonzero(true), the loop body is executed and the expression is tested again.</p><ol start=\"5\"><li><p>The loop continues until the controlling expression eventually has the value zero(false).</p></li></ol><h2>The <code>do</code> statement</h2><p>The <code>do</code> statement has the following form:</p><pre><code>do statement while ( expression ) ;</code></pre><p>1. The <code>do</code> statement is similar to the <code>while</code> statement but the controlling expression is tested <strong>after</strong> the loop body is executed.</p><p>2. The loop body is guaranteed to be executed <strong>at least once</strong>.</p><h1>3.5 The <code>for</code> Statement</h1><p>The for statement has the following form:</p><pre><code>for ( expr1 ; expr2 ; expr3 ) \n    statement </code></pre><ol><li><p><code>expr1</code> is an initialization step that’s performed only once.</p></li><li><p><code>expr2</code> controls loop termination.</p></li><li><p><code>expr3</code> is performed at the end of each loop iteration.</p></li></ol><h2>Omitting Expressions in a <code>for</code> Statement</h2><p>C allows any or all of the expressions that control a <code>for</code> statement to be omitted.</p><ol><li><p>If the first expression is omitted, no initialization is performed.</p></li><li><p>If the second expression is missing, it defaults to a true value. so the for statement doesn’t terminate.</p></li><li><p>If the third expression is omitted, the loop body is responsible for ensuring that the value of the second expression eventually becomes false.</p></li><li><p>When the first and third expressions are both omitted, the resulting loop is nothing more than a while statement in disguise.</p><pre><code>for ( ; i &gt; 0; )\n    printf(\"T minus %d and counting\\n\", i--);</code></pre></li></ol><h2>Declare Variable in the First Expression</h2><pre><code>for (int i = 0; i &lt; n; i++) {\n    printf(\"%d\", i);\n}</code></pre><ol><li><p>A variable declared by a for statement can’t be accessed outside the body of the loop</p></li><li><p>Having a for statement declare its own control variable is usually a good idea.</p></li><li><p>A <code>for</code> statement may declare more than one variable but all variables have the same type.</p></li></ol><h2>Comma Operator</h2><p>A comma expression has the form</p><pre><code>expr1 , expr2</code></pre><ol><li><p><code>expr1</code> is evaluated and its value discarded.</p></li><li><p><code>expr2</code> is evaluated; its value is the value of the entire expression.</p></li><li><p><code>expr1</code> should always have a side effect; if it doesn’t, then expr1 serves no purpose.</p></li><li><p>The comma operator is left associative</p></li><li><p><code>for</code> statement and marco is the place where the comma operator is likely to be found.</p></li><li><p>With additional commas, the for statement could initialize more than two variables.</p></li></ol><h1>3.6 Exiting from a Loop</h1><ol><li><p>The normal exit point for a loop is at the beginning or end.</p></li><li><p>Using the break statement, it’s possible to write a loop with an exit point in the middle or a loop with more than one exit point.</p></li></ol><h2>The <code>break</code> Statement</h2><ol><li><p>A break statement transfers control out of the innermost enclosing <code>while</code>, <code>do</code>, <code>for</code>, or <code>switch</code>.</p></li><li><p>When these statements are nested, the break statement can escape only one level of nesting.</p></li></ol><h2>The <code>continue</code> Statement</h2><ol><li><p><code>continue</code> transfers control to a point just before the end of the loop body</p></li><li><p><code>continue</code> statement is similar to break</p></li></ol><ul><li><p>With <code>break</code>, control leaves the loop; with <code>continue</code>, control remains inside the loop.</p></li><li><p><code>break</code> can be used in switch statements and loops (<code>while</code>, <code>do</code>, and <code>for</code>), whereas continue is limited to loops</p></li></ul><p></p>",
    "videoUrl": "https://www.youtube.com/embed/PB2AGFWyDLQ,https://www.youtube.com/embed/T3bSsvOMblw,https://www.youtube.com/embed/k94v5PXnny8,https://www.youtube.com/embed/Rbi5yKpMIss,https://www.youtube.com/embed/wT3k1pM34eM",
    "makeUpTime": "2022-10-12T16:00:00.000Z",
    "notification": {
        "makeUpTime": "jDz2CAl3AhTfWu3U5L6g"
    },
    "startTime": "2022-09-28T16:00:00.000Z",
    "dueTime": "2022-10-19T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec03-2",
    "title": "Control Structures (part 2)"
}