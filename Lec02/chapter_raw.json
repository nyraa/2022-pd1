{
    "review": "<h1>2.1 Writing a Simple Program</h1><h2>Steps to Generate an Executable from a C Program</h2><ol><li><p>Preprocessing</p><ul><li><p>Preprocessor dealing with commands that begin with <code>#</code>, which are known as <strong>directives</strong>.</p></li></ul></li><li><p> Compiling</p><ul><li><p>Compiler translates the program into machine instructions (<strong>object code</strong>)</p></li></ul></li><li><p>Linking</p><ul><li><p>Linker combines object codes and libraries to produce an executable program</p></li></ul></li></ol><h2>Compile Under Unix-like Systems</h2><p>Under unix like systems, a C program could be compiled (preprocess, compile and link) using <code>gcc</code>:</p><pre><code>$ gcc program.c</code></pre><p>An executable named <code>a.out</code> will be generated if there is no error in <code>program.c</code>. The name of the generated executable could be specified with <code>-o</code> option:</p><pre><code>$ gcc -o executable program.c</code></pre><p>With the above command, the executable will be named <code>executable</code>. The program could be executed with command:</p><pre><code>$ ./executable</code></pre><h2>IDE</h2><p>An <strong>IDE</strong> (Integrated Development Environment) is a software that integrates <strong>editing</strong>, <strong>compiling</strong>, <strong>executing</strong> and <strong>debugging</strong> functionalities into a single environment.</p><h2>Program Layout</h2><p>A C program is formed by a series of <strong>token</strong>s:</p><ul><li><p>Identifiers</p></li><li><p>Keywords</p></li><li><p>Operators</p></li><li><p>Punctuation</p></li><li><p>Constants</p></li><li><p>String literals</p></li></ul><h3>Spacing in C Program</h3><ol><li><p>There are three kind of space: <strong>blank</strong>, <strong>tab</strong> and <strong>new-line character</strong>.</p></li></ol><ol start=\"2\"><li><p>Each preprocessing directive occupies a seperate line.</p></li></ol><ol start=\"3\"><li><p>The amount of space between tokens <strong>is not critical</strong>, but spaces could not be added within a token, and a string literal could not be split into two lines, either.</p></li><li><p>A program with proper amount of space between tokens has better readability.</p></li></ol><pre><code>#include &lt;stdio.h&gt;\nint main(){\nint should_print;\nscanf(\"%d\", &amp;should_print);\nif (should_print == 1)\n{printf(\"hello world\\n\");}\nreturn 0;}</code></pre><p>    vs</p><pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int should_print;\n    scanf(\"%d\", &amp;should_print);\n\n    if (should_print == 1) {\n        printf(\"hello world\\n\");\n    }\n\n    return 0;\n}</code></pre><h3>Comment</h3><ol><li><p><code>// single line comment</code>: A single line comment begins with <code>//</code>.</p></li><li><p><code>/ a comment block /</code> : The the texts (could be multiple lines) between <code>/*</code> and <code>*/</code> pair are treated as comment and will be skipped while compiling.</p></li></ol><h1>2.2 General Form of a Simple Program</h1><p>A C program is formed by three key language features:</p><ol><li><p>Directives</p></li><li><p>Functions</p></li><li><p>Statements</p></li></ol><h2>Directives</h2><ol><li><p>Commands that would be dealt with by the <strong>Preprocessor</strong>.</p></li><li><p>Always begin with a <code>#</code>.</p></li><li><p>One line long.</p></li><li><p>No special mark at the end.</p></li><li><p>Will be processed before the actual compiling process.</p></li></ol><h3>Commonly Used Directives</h3><ol><li><p><code>#include &lt;header.h&gt;</code> or <code>#include \"header.h\"</code>: The content of <code>header.h</code> will be copied to the line that includes it. The <code>&lt;&gt;</code> and <code>\"\"</code> indicates different search path for the file <code>header.h</code>. Preprocessor will try to find the file marked by <code>&lt;&gt;</code> under system defined pathes, while find the file marked by <code>\"\"</code> under the current directory where the preprocessor executes.</p></li><li><p><code>#define MACRO VALUE</code>: The preprocessor substitutes <code>MACRO</code> in the program with <code>VALUE</code>.</p></li></ol><h2>Statements</h2><ol><li><p>Commands to be executed when the program runs.</p></li><li><p>C requires that each statement ends with a <code>;</code> except the compound statement.</p></li><li><p>Compound statement is a statement that holds several statements in a <code>{</code>, <code>}</code> pair.</p></li></ol><h2>Functions</h2><ol><li><p>A series of statements that have been grouped together and given a name.</p></li><li><p>Library functions are provided as part of the C implementation.</p></li><li><p>A function that computes a value uses a return statement to the value to be return: <code>return x + 1;</code>.</p></li></ol><h3>The <strong>main</strong> function</h3><ol><li><p>The main function is mandatory.</p></li><li><p>Gets called automatically when the program is executed.</p></li><li><p>Returns a status code; the value 0 indicates normal program termination.</p></li></ol><h1>2.3 Variables and Assignment</h1><h2>Variables</h2><ol><li><p>Store data during program execution.</p></li><li><p>Must have a type, which decides how the variable is stored and what operations can be performed.</p><ul><li><p>C has a wide variety of types, including <code>int</code> and <code>float</code>.</p></li></ul></li><li><p>Must be declared before they are used.</p></li><li><p>One or more variables can be declared at a time: <code>int height, length, width, volume; float profit;</code></p></li><li><p>Some variables are automatically set to zero when a program begins to execute, but most are not.</p></li><li><p>A variable is said to be uninitialized when following happends:</p><ul><li><p>Does not have a default value</p></li><li><p>has not yet been assigned a value</p></li></ul></li><li><p>Attempting to access the value of an uninitialized variable may yield an unpredictable result.</p></li><li><p>The initial value of a variable may be included in its declaration: <code>int height = 8;</code>, where the value 8 is said to be an initializer.</p></li></ol><h3>int</h3><ol><li><p>A variable of type int (short for integer) can store a whole number such as <code>0</code>, <code>1</code>, <code>392</code>, or <code>Â±2553</code>.</p></li></ol><h3>float</h3><ol><li><p>A float (short for floating-point) variable can store numbers with digits after the decimal point, like <code>379.125</code>.</p></li><li><p>Variables with float type have some drawbacks:</p><ul><li><p>Slower arithmetic</p></li><li><p><strong>Approximate</strong> nature of float values</p></li></ul></li></ol><h2>Assignment</h2><ol><li><p>A variable can be given a value by means of assignment: <code>height = 8;</code>, where the number 8 is said to be a <strong>constant</strong>.</p></li><li><p>A constant assigned to a float variable usually contains a decimal point: <code>profit = 2150.48;</code></p></li><li><p>It is best to append the letter <code>f</code> to a floating-point constant if it is assigned to a float variable: <code>profit = 2150.48f;</code></p></li><li><p>A variable is normally assigned a value of the same type.</p></li><li><p>Mixing types (such as assigning a float value to an int variable) is possible but not always safe.</p></li><li><p>A variable that has been assigned a value can be used to compute the value of another variable:</p></li></ol><pre><code>length = 12;\nwidth = 10;\narea = length * width;</code></pre><ol start=\"7\"><li><p>The right side of an assignment can be an expression involving <strong>constants</strong>, <strong>variables</strong>, and <strong>operators</strong>.</p></li></ol><h2>Print with <code>printf</code></h2><ol><li><p>When the <code>printf</code> function displays a string literal, characters enclosed in double quotation marks, it does not present the quotation marks.</p></li><li><p><code>printf</code> does not advance to next line automatically.</p></li><li><p><code>\\n</code> (new-line character) is used to make <code>printf</code> to advance to next line.</p></li><li><p>To print variables with <code>printf</code>, placeholders that specifies the format should be provided, and the variables should be provided to <code>printf</code> as well.</p></li><li><p><code>%d</code>, which inicates decimal, works only for int variables.</p></li></ol><pre><code>int i = 5;\nprintf(\"%d\\n\", i);</code></pre><ol start=\"6\"><li><p><code>%f</code> works for float variables.</p><ul><li><p>Displays a number with six digits after the decimal point by default.</p></li><li><p>Put <code>.p</code> between <code>%</code> and <code>f</code> forces <code>printf</code> to display p digits after the decimal point.</p></li></ul></li></ol><pre><code>float f = 3.141592f;\nprintf(\"%f\\n\", f); // prints 3.141592\nprintf(\"%.2f\\n\", f); // prints 3.14</code></pre><ol start=\"7\"><li><p><code>printf</code> can display the value of any numeric expression.</p></li></ol><pre><code>int a = 1, b = 2;\nprintf(\"%d\\n\", a * b);</code></pre><h1>2.4 Assigning from Input or Constants</h1><h2>Reading Input</h2><ol><li><p>A format string is required to specify the appearance of the input data.</p></li><li><p>Using <code>%d</code> to read an int value.</p></li><li><p>Using <code>%f</code> to read a float value.</p></li><li><p>The <code>&amp;</code> symbol obtains the address of a variable in memory for <code>scanf</code> to store the input value.</p></li></ol><pre><code>int i;\nfloat x;\nscanf(\"%d\", &amp;i);\nscanf(\"%f\", &amp;x);</code></pre><h2>Definding Names for Constants</h2><ol><li><p>Name a constant using <strong>macro definition</strong>: <code>#define MAGIC 1234</code></p></li><li><p>The value of a macro can be an expression: <code>#define RECIPROCALOFPI (1.0f / 3.14159f)</code></p></li><li><p>The expression should be enclosed in parentheses to keep the precedence.</p></li><li><p>Using only <strong>upper-case letters</strong> in macro names is a common convention.</p></li></ol>",
    "videoUrl": "https://www.youtube.com/embed/3-UwjfAg40g,https://www.youtube.com/embed/Z6As9WyFpRg,https://www.youtube.com/embed/BalImwDk0RM,https://www.youtube.com/embed/Lc2m5ifRt-w,https://www.youtube.com/embed/oTN_jGjVRV0",
    "makeUpTime": "2022-09-28T19:00:00.000Z",
    "notification": {},
    "startTime": "2022-09-14T16:00:00.000Z",
    "dueTime": "2022-10-05T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec02",
    "title": "C Fundamentals"
}