{
    "review": "<h2><strong>準備開發環境</strong></h2><p>在我們開始寫程式之前，我們需要先準備<strong>程式碼開發環境</strong>。什麼叫作「環境」呢？簡單來說，就是讓你的電腦俱備可以看懂你寫的程式碼、把他轉成執行檔，並且執行該執行檔的能力。</p><p>由於 C 語言是一個編譯式語言，因此在開發一個 C 語言的程式時，一般來說需要經過以下的步驟：</p><ol><li><p>撰寫程式碼</p></li><li><p>編譯程式碼</p></li><li><p>執行程式碼</p></li><li><p>對程式碼除錯</p></li></ol><p>在每一個步驟，你都會需要用到一些工具來協助你完成這些動作。<strong>備妥這些工具，就是在準備程式碼開發環境。</strong></p><p></p><h3>1. 撰寫程式碼</h3><p>要撰寫程式碼，就需要一個<strong>編輯器 (Editor)</strong>。 C 語言的程式碼，說白了就是一個副檔名是 .c 的純文字檔。所謂的「撰寫程式碼」，其實就只是在編輯一個純文字檔僅此而已。既然是純文字檔，那麼任何一個可以編輯純文字的編輯器，其實都可以用來寫程式。因此，如果你真的很勇（或是很不懂的利用工具，像是大一時的助教我 :)），要使用 Windows 內建的記事本來寫程式，也是完全沒有問題的。</p><p>但是，程式碼不僅僅是隨便的純文字而已，程式碼是有<strong>語法規則 (syntax) </strong>的。撰寫程式碼時若違反了語法規則，會導致程式碼無法正常被編譯。因此，為了程式開發者的方便，坊間有許多寫程式專用的<strong>程式編輯器 (Code Editor) </strong>或是<strong>整合開發環境 (Integrated Development Environment, IDE)</strong> ，來幫助程式開發者更快速流暢地撰寫程式碼。這些程式編輯器往往都有語法提示 (syntax highlight)、語法錯誤檢查，有些甚至附有強大的自動完成、自動排版功能。善用這些工具，可以讓我們寫起程式來更加得心應手。</p><p>在這門課中，我們推薦大家使用 <strong>CLion</strong> 這套 IDE 來撰寫程式，具體的安裝步驟可以參考上方的教學影片，以及 moodle 上的公告。但如果你有自己習慣的編輯器，像是 VS Code、Dev C++、notepad++，甚至是內建的記事本（?!），你希望使用自己習慣的工具，也是完全沒有問題的。</p><p></p><h3>2. 編譯程式碼</h3><p>C 語言是一種<strong>高階的編譯式語言</strong>。所謂的「高階語言」，指的是該語言的程式碼是用英文和標點符號寫出來的，電腦無法直接看懂。要從高階語言變成電腦看得懂的機器碼，就需要經過翻譯的過程，而根據翻譯過程差異，可以將程式語言區別為<strong>編譯語言</strong>和<strong>直譯語言</strong>兩大類。以編譯語言來說，他們必須經過編譯器變成組合語言，再經過組譯器變成機器碼，才可以讓電腦看懂。</p><p>為了把 C 語言的原始碼翻譯成電腦能看懂的機器碼，我們會需要用到<strong>編譯器 (Compiler)</strong>。以 C 語言來說，目前最被廣泛使用的編譯器應該非 <strong><a rel=\"noopener noreferrer nofollow\" href=\"https://zh.wikipedia.org/wiki/GCC\">GNU 編譯器套裝 (GNU Compiler Collection, GCC)</a></strong> 莫屬了。 gcc 整合了編譯過程當中會用到的工具鍊，只要透過一個簡單的指令就能完成編譯的動作。由於他支援多種程式語言、多種指令集架構，擁有跨平台的特性，因此受到許多程式開發者的青睞。</p><p>gcc 是一套自由軟體，你可以在網路上免費下載它。在類 Unix 作業系統（如 Linux, MacOS 等）當中， gcc 可以透過作業系統內建的套件管理系統（如 apt 等）下載。但是在 Windows 作業系統上，原生是沒有 gcc 可以使用的，我們需要額外安裝 <strong>MinGW</strong> 這套軟體，才能在 Windows 作業系統上使用 gcc 的功能。你可以參考上方的教學影片來完成 MinGW 的安裝。<strong>（注意：若安裝過程中遭遇困難，請參考 Moodle 上的公告）</strong></p><p></p><h3>3. 執行程式碼</h3><p>將 C 語言原始碼編譯成執行檔之後，電腦就知道要怎麼執行這支程式了。但由於在這門課中，我們只會學到<strong>標準輸入輸出</strong>，也就是透過鍵盤以純文字和程式互動的方式，並不會學到如何使用 C 語言撰寫一個圖形化介面應用程式，因此我們需要使用到<strong>命令列介面 (Command Line Interface, CLI)</strong> 來執行我們編譯好的程式。在類 Unix 作業系統當中，可以透過打開<strong>終端機 (Terminal)</strong> 來進入 CLI ；而在 Windows 作業系統中，則可以透過啟動 <strong>Powershell</strong> 來進入 CLI 。進入 CLI 後需要學習一些基本的指令，才能正常操作電腦。你可以參考上方的教學影片，來學習如何使用 CLI。</p><p></p><h3>4. 對程式碼除錯</h3><p>程式碼寫完之後，並不一定能馬上正確執行。有時程式執行下去，會跑出錯誤的結果，或是無法正常執行，這時我們就需要對程式進行<strong>除錯 (Debug)</strong>。初學者或許會習慣使用標準輸出來協助自己除錯，但使用除錯工具可以幫助我們更全面的了解程式碼的執行狀況。因此，助教推薦同學們隨著作業的進展，慢慢開始學習使用 <strong>gdb</strong> 這套除錯工具，來協助自己對程式碼除錯。</p><p></p><h2><strong>選擇作業系統</strong></h2><p>由於微軟的高市佔率，大部分的同學第一次接觸到電腦時，使用的都是 Windows 作業系統。Windows 作為個人電腦的作業系統，提供了非常完善的文書處理與娛樂相關的功能，對非程式開發者的使用者們來說，實在是相當好用。但是對於程式開發者來說，Windows 相較於開源的 <strong>Linux</strong> 作業系統來說，缺少了很多協助開發的工具或環境，在測試某些功能時也較缺乏彈性。因此，程式開發者們往往除了 Windows ，也會學習使用 Linux 作業系統。</p><p>要使用 Linux 作業系統，你有以下幾種方法可以選擇：</p><ul><li><p>買一台沒有安裝任何作業系統的新電腦，然後自己<strong>灌入 Linux 作業系統</strong></p></li><li><p>買一台已經裝有 Windows 作業系統的電腦，然後再<strong>安裝 Linux 雙系統</strong></p></li><li><p>在 Windows 作業系統中安裝<strong>虛擬機</strong>，並匯入 Linux 作業系統的映像檔</p></li><li><p>在 Windows 作業系統中使用 <strong>Windows Subsystem for Linux (WSL)</strong></p></li></ul><p>前兩個選擇較進階，但可以確保你的 Linux 作業系統能完整使用到你的電腦硬體資源。不過對於只是要學習怎麼使用 Linux 作業系統的初學者來說，可以不需要用到這麼進階的作法。以初學來說，我們可以先學習怎麼在 Windows 作業系統內，以軟體的方式模擬 Linux 作業系統即可。關於如何在 Windows 中安裝虛擬機或是啟用 WSL，可以參考在 Moodle 上的助教投影片。</p><p></p><p>在完成開發環境準備後，試試看寫一支 Hello C 程式，測試自己是否已經準備萬全了吧！</p>",
    "videoUrl": "https://www.youtube.com/embed/HyMsrY37kdY,https://www.youtube.com/embed/2glyYWfD6YE",
    "makeUpTime": "2022-09-21T16:00:00.000Z",
    "notification": {},
    "startTime": "2022-09-14T16:00:00.000Z",
    "dueTime": "2022-09-28T16:00:00.000Z",
    "sections": [],
    "type": "Homework",
    "index": "Lec00",
    "title": "Coding Environment"
}